{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategorias","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","categorias","alert","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","category","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAA0B,IAAvBC,EAAsB,EAAtBA,cAG7B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OAEG,sBAAMC,SAda,SAACC,GAEpBA,EAAEC,iBAEIJ,EAAWK,OAAOC,OAAS,GAE9BR,GAAe,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC9CN,EAAc,KAEbO,MAAO,6CAKX,SACE,uBACGC,KAAM,OACNC,MAAUV,EACVW,SAxBkB,SAAER,GAE1BF,EAAeE,EAAES,OAAOF,a,+BCPfG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACfC,EADe,0FAC2EC,UAAUH,GADrF,sBAEDI,MAAOF,GAFN,cAEfG,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KAEHC,EAAOD,EAAKE,KAAK,SAAEC,GAAU,IAAD,EAC/B,MAAO,CACLC,GAAKD,EAAIC,GACTC,MAAOF,EAAIE,MACXV,IAAG,UAAGQ,EAAIG,cAAP,aAAG,EAAYC,iBAAiBZ,QATlB,kBAYdM,GAZc,4CAAH,sDCDPO,EAAc,SAAC,GAAwB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAExC,OACE,sBAAKc,UAAY,yCAAjB,UACK,qBAAKC,IAAQf,EAAMgB,IAAON,IAC1B,4BAAKA,QCHDO,EAAU,SAAC,GAAqB,IAAlBnB,EAAiB,EAAjBA,UAGvB,ECAwB,SAAEA,GAG5B,MAA0Bf,mBAAS,CACjCsB,KAAO,GACPa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAW,WAETxB,EAASC,GACRwB,MAAM,SAAAC,GAAI,OAELH,EAAS,CACTf,KAAMkB,EACNL,SAAS,SAIf,CAAEpB,IAEGqB,EDrB4BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAEvB,OACE,qCAEA,qBAAIJ,UAAY,oCAAhB,cAAuDhB,KAGvD,sBAAKgB,UAAU,YAAf,UAEKI,GAAW,mBAAGJ,UAAY,mCAAf,uBAGVH,EAAOJ,KAAK,SAAAC,GAAG,OACd,cAAC,EAAD,eAEMA,GADEA,EAAIC,cEOFgB,EAzBA,WAEZ,MAAsC1C,mBAAS,CAAC,aAAhD,mBAAQQ,EAAR,KAAoBT,EAApB,KAEC,OACI,qCACA,+CAEA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAIIS,EAAWgB,KAAK,SAAAmB,GAAQ,OAC1B,cAAC,EAAD,CAEA5B,UAAc4B,GADNA,U,MCZpBC,IAASC,OAAQ,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.ae137900.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Proptypes from 'prop-types';\n\nexport const AddCategory = ( { setcategorias }  ) => {\n\n  //Creamos un estado para el input del componente AddCategory\n  const [inputValue, setinputValue] = useState('');\n\n  const handleInputChange = ( e ) => {\n    // esta funcion sirve para escribir en la caja de texto \n    setinputValue( e.target.value );\n\n  }\n\n   const handleSubmit = (e)  => { \n     //el preventDefault evita el refresh y envio del formulario al poner enter\n     e.preventDefault();\n      // el trim quita el espacio del texto\n       if( inputValue.trim().length > 2 ) \n       {\n        setcategorias( categorias => [ inputValue, ...categorias] );\n        setinputValue('');\n       }else { \n         alert( 'compa ponga algo en el texto de entrada ' );\n       }\n   }\n  return (\n     \n     <form onSubmit ={ handleSubmit }>\n       <input \n          type= \"text\" \n          value = { inputValue }\n          onChange ={ handleInputChange }\n          />\n     </form>\n \n  )\n};\nAddCategory.propTypes = {\n  setcategorias: Proptypes.func.isRequired\n}\n\n","\n// los helpers Son funciones que hacen un trabajo especifico donde reciben argumentos y te hace un return \n\nexport const getGifs = async ( categoria ) => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=LUFKsKlRrtEAY6p05kdU61aIwqrlnQnI&q=${ encodeURI(categoria) }&limit=10`;\n  const resp =  await fetch( url );\n  const { data } = await resp.json();\n\n const gifs = data.map( ( img ) => { \n    return {\n      id : img.id,\n      title: img.title,\n      url : img.images?.downsized_medium.url\n    }\n  });\n  return gifs;\n  \n}","import React from 'react'\n\nexport const GifGridItem = ( { id, title, url} ) => {\n  // console.log( id, title, url );\n  return (\n    <div className = 'card animate__animated animate__bounce'>\n         <img src = { url } alt= { title } />\n         <p>{ title }</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'; \nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { categoria } ) => {\n\n  // el data:images renombramos el data con el otro nombre de images \n    const { data:images, loading } = useFetchGifs( categoria );\n  \n  return ( \n    <>\n    {/* el h3 el nombre de la categoria */}\n    <h3 className = 'animate__animated animate__bounce'> { categoria }</h3>\n  \n      {/* devuelve una caja de grid de gifs */}\n    <div className=\"card-grid\">\n       \n       { loading && <p className = 'animate__animated animate__flash'> Loading </p> }\n    \n        {\n          images.map( img =>\n           <GifGridItem\n           key = { img.id }\n            { ...img }\n           />\n           )\n        }    \n    </div>\n    </>\n  )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n// un Custom no es mas que extraer logica de algun componente o logica que yo quiero reutilizar y extraerlo \n// para que sea sencillo reutilizar nuevamente.\n// los custom hook o hooks personalizado pueden tener estados \n// este custom hook fue creado para que GifGrid no este muy cargado y tenga codigo limpio \nexport const useFetchGifs = ( categoria ) => {\n\n  //creamo un estado que sea un objeto\n  const [state, setstate] = useState({\n    data : [],\n    loading: true \n  });\n\n  useEffect( () => {\n    \n    getGifs( categoria )\n    .then( imgs => \n  \n          setstate({\n          data: imgs,\n          loading: false \n           }) \n      );\n\n  },[ categoria ]);\n\n  return state;\n\n}","import React,{ useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n// Componente padre es GifExpertApp\nconst GifExpertApp = () =>{\n        //Crea categorias en un array\n         const [ categorias, setcategorias ] = useState(['labrador']);\n         //retorna el componente Principal\n          return (\n              <>\n              <h2> GifExpertApp</h2>\n               {/* mandamos la funcion setcategoria al componente AddCategory */}\n              <AddCategory setcategorias = { setcategorias } />\n              <hr/>  \n         \n                { \n                  {/* usamos el map porque retorna un valor pero un for no retorna nada  */},\n                  categorias.map( category => \n                <GifGrid \n                key = { category } \n                categoria = { category }\n                />\n               )\n               } \n              </>\n                 )\n      };\n\n\n      export default GifExpertApp;\n      \n\n    \n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\n    ReactDOM.render( <GifExpertApp />, document.getElementById('root') );\n\n"],"sourceRoot":""}